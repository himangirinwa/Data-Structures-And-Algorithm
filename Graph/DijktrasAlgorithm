
- - - - - - - - - - - - - - - Dijktra's Algoritm - - - - - - - - - - - - - - - - - - - - -   
    
    
    Dijktras's algorithm is a single source shortest path problem. It finds shortest 
path between 2 given vertices.It differs from the minimum spanning tree because the shortest distance between two vertices might not include all the vertices of the graph. 
It works for both types of graphs i.e, directed as well as undirected.

    Dijktra's algorithm is based on "greedy progmaning" approach. And this is feasible here
as we are finding the shortest path, and hence it is a optimisation problem and can be solved
using greedy method.


# principle of Dijktra's algorithm : 
    Dijkstra's Algorithm works on the basis that any subpath B -> D of the shortest path A -> D between vertices A and D is also the shortest path between vertices B and D.
    Djikstra used this property in the opposite direction i.e we overestimate the distance of each vertex from the starting vertex. Then we visit each node and its neighbors to find the shortest subpath to those neighbors.

    Djikstra used this property in the opposite direction i.e we overestimate the distance of each vertex from the starting vertex. Then we visit each node and its neighbors to find the shortest subpath to those neighbors.


# Relaxing a vertex :
    The single - source shortest paths are based on a technique known as relaxation, a method that repeatedly decreases an upper bound on the actual shortest path weight of each vertex until the upper bound equivalent the shortest - path weight.
    i.e, if the W(V) > {W(U) + W(E(UV))}, then we change the path distance of V from source vertex 
    from W(V) to {W(U) + W(E(UV))}. This is called as relaxing.


# NOte :
if you want to find shortest path to the sepcified vertex only, then as soon as you mark destination 
vertex as visited, you can stop algo.


# Algorithm : 

1. select a source vertex
2. overestimate the distance from source vertex to all other vertices.
3. Go to each vertex and update path length of the vertex, i.e relax the vertices.
If the path length of the adjacent vertex is lesser than new path length, don't update it.
4. Avoid updating path lengths of already visited vertices
5. After each iteration, we pick the unvisited vertex with the least path length.
6. Repeat until all the vertices have been visited.


# Time Complexity : 
    The time Complexity of the implementation is O(V2). If the input graph is represented using adjacency list, it can be reduced to O(E * log V) with the help of a binary heap.



# Limitations : 
1. It may not work on -ve edges graph as it does not update path for already visited vertex.
        
         2
    0 ---------> 1
    |      ->
 3  |    - 
    |  -  -10
    ^ -
    3

# Applications : 
1. To find the shortest path
2. In social networking applications
3. In a telephone network
4. To find the locations in the map



